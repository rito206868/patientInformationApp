{"version":3,"sources":["./src/app/patients/patient-create/patient-create.component.html","./src/app/patients/patient-details/patient-details.component.html","./src/app/patients/patient-list/patient-list.component.html","./src/app/patients/patient-update/patient-update.component.html","./src/app/constant.ts","./src/app/model/patient.ts","./src/app/model/patient_name.ts","./src/app/model/postal_address.ts","./src/app/patients/patient-create/patient-create.component.css","./src/app/patients/patient-create/patient-create.component.ts","./src/app/patients/patient-details/patient-details.component.css","./src/app/patients/patient-details/patient-details.component.ts","./src/app/patients/patient-list/patient-list.component.ts","./src/app/patients/patient-routing.module.ts","./src/app/patients/patient-update/patient-update.component.css","./src/app/patients/patient-update/patient-update.component.ts","./src/app/patients/patient.module.ts","./src/app/services/patient.service.ts"],"names":[],"mappings":"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","file":"patients-patient-module-es2015.js","sourcesContent":["export default \"<section fxLayout=\\\"row wrap\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n  <mat-card fxFlex=\\\"87%\\\" fxFlex.xs=\\\"100%\\\" style=\\\"border: 1;\\\">\\r\\n\\r\\n    <mat-card-title fxLayoutAlign=\\\"center center\\\">Register a new Patient</mat-card-title>\\r\\n\\r\\n    <form [formGroup]=\\\"registerForm\\\" autocomplete=\\\"off\\\" novalidate (ngSubmit)=\\\"register(registerForm.value)\\\">\\r\\n\\r\\n      <mat-card-content fxLayout=\\\"column wrap\\\">\\r\\n\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label><b>Patient Name</b></mat-label><br>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"FirstName\\\" formControlName=\\\"firstName\\\" id=\\\"firstName\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 50 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('firstName', 'required')\\\">Name is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('firstName', 'maxlength')\\\">You have more than 50 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"LastName\\\" formControlName=\\\"lastName\\\" id=\\\"lastName\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 50 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('lastName', 'required')\\\">Last Name is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('lastName', 'maxlength')\\\">You have more than 50 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label><b>Postal Address</b></mat-label><br>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Line1\\\" formControlName=\\\"line1\\\" id=\\\"line1\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 150 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('line1', 'required')\\\">Address Line 1 is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('line1', 'maxlength')\\\">You have more than 150 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Line2\\\" formControlName=\\\"line2\\\" id=\\\"line2\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 150 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('line2', 'required')\\\">Address Line 2 is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('line2', 'maxlength')\\\">You have more than 150 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <br>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"City\\\" formControlName=\\\"city\\\" id=\\\"city\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 50 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('city', 'required')\\\">City is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('city', 'maxlength')\\\">You have more than 50 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"State\\\" formControlName=\\\"state\\\" id=\\\"state\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 50 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('state', 'required')\\\">State is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('state', 'maxlength')\\\">You have more than 50 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Zip\\\" formControlName=\\\"zip\\\" id=\\\"zip\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 6 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('zip', 'required')\\\">Zip is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('zip', 'maxlength')\\\">You have more than 6 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label>Gender</mat-label>\\r\\n          <mat-radio-group formControlName=\\\"gender\\\" id=\\\"gender\\\">\\r\\n            <mat-radio-button *ngFor=\\\"let item of genders\\\" [value]=\\\"item.value\\\">\\r\\n              {{item.option}}\\r\\n              &nbsp;\\r\\n            </mat-radio-button>\\r\\n          </mat-radio-group>\\r\\n          <br>\\r\\n          <mat-hint align=\\\"left\\\" class=\\\"mat-hint-style\\\">Gender is required</mat-hint>\\r\\n        </div>\\r\\n        <div>\\r\\n          <mat-form-field>\\r\\n            <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Select Date of Birth\\\" formControlName=\\\"dateOfBirth\\\"\\r\\n              id=\\\"dateOfBirth\\\" readonly (click)=\\\"picker.open()\\\">\\r\\n            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n            <mat-datepicker #picker></mat-datepicker>\\r\\n            <mat-hint align=\\\"left\\\">Date of Birth is required</mat-hint>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Email\\\" formControlName=\\\"mailId\\\" id=\\\"mailId\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 60 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('mailId', 'required')\\\">Mailid is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('mailId', 'maxlength')\\\">You have more than 60 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"PhoneNo\\\" formControlName=\\\"phone\\\" id=\\\"phone\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 6 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('phone', 'required')\\\">Phone Number is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('phone', 'maxlength')\\\">You have more than 10 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label>Marital Status</mat-label>\\r\\n          <mat-radio-group formControlName=\\\"maritalStatus\\\" id=\\\"maritalStatus\\\">\\r\\n            <mat-radio-button *ngFor=\\\"let item of marital_status\\\" [value]=\\\"item.value\\\">\\r\\n              {{item.option}}\\r\\n              &nbsp;\\r\\n            </mat-radio-button>\\r\\n          </mat-radio-group>\\r\\n          <br>\\r\\n          <mat-hint align=\\\"left\\\" class=\\\"mat-hint-style\\\">Marital Status is required</mat-hint>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label>Medical History</mat-label>\\r\\n          <ng-container *ngFor=\\\"let item of disease_type; let i = index\\\">\\r\\n            <mat-checkbox (change)=\\\"onChange($event)\\\" [value]=\\\"item.name\\\">{{item.name}}\\r\\n            </mat-checkbox>\\r\\n          </ng-container>\\r\\n          <br>\\r\\n          <mat-hint align=\\\"left\\\" class=\\\"mat-hint-style\\\">Medical History is required</mat-hint>\\r\\n        </div>\\r\\n\\r\\n      </mat-card-content>\\r\\n\\r\\n      <mat-card-actions style=\\\"text-align: center;\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"!registerForm.valid\\\">Register</button>\\r\\n        <button type=\\\"button\\\" mat-raised-button color=\\\"warn\\\" (click)=\\\"loginForm.reset()\\\">Reset</button>\\r\\n      </mat-card-actions>\\r\\n\\r\\n    </form>\\r\\n\\r\\n  </mat-card>\\r\\n</section>\"","export default \"<section fxLayout=\\\"row wrap\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n  <mat-card fxFlex=\\\"87%\\\" fxFlex.xs=\\\"100%\\\" style=\\\"border: 1;\\\">\\r\\n\\r\\n    <mat-card-title fxLayoutAlign=\\\"center center\\\">Registered Patient Details</mat-card-title>\\r\\n\\r\\n    <form [formGroup]=\\\"registerForm\\\" autocomplete=\\\"off\\\" novalidate>\\r\\n\\r\\n      <mat-card-content fxLayout=\\\"column wrap\\\">\\r\\n\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label><b>Patient Name</b></mat-label><br>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"FirstName\\\" formControlName=\\\"firstName\\\" id=\\\"firstName\\\">\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"LastName\\\" formControlName=\\\"lastName\\\" id=\\\"lastName\\\">\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label><b>Postal Address</b></mat-label><br>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Line1\\\" formControlName=\\\"line1\\\" id=\\\"line1\\\">\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Line2\\\" formControlName=\\\"line2\\\" id=\\\"line2\\\">\\r\\n          </mat-form-field>\\r\\n          <br>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"City\\\" formControlName=\\\"city\\\" id=\\\"city\\\">\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"State\\\" formControlName=\\\"state\\\" id=\\\"state\\\">\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Zip\\\" formControlName=\\\"zip\\\" id=\\\"zip\\\">\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label>Gender</mat-label>\\r\\n          <mat-radio-group formControlName=\\\"gender\\\" id=\\\"gender\\\">\\r\\n            <mat-radio-button *ngFor=\\\"let item of genders\\\" [checked]=\\\"item.checked\\\" [value]=\\\"item.value\\\">\\r\\n              {{item.option}}\\r\\n              &nbsp;\\r\\n            </mat-radio-button>\\r\\n          </mat-radio-group>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Date of Birth\\\" formControlName=\\\"dateOfBirth\\\"\\r\\n              id=\\\"dateOfBirth\\\">\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Email\\\" formControlName=\\\"mailId\\\" id=\\\"mailId\\\">\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"PhoneNo\\\" formControlName=\\\"phone\\\" id=\\\"phone\\\">\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label>Marital Status</mat-label>\\r\\n          <mat-radio-group formControlName=\\\"maritalStatus\\\" id=\\\"maritalStatus\\\">\\r\\n            <mat-radio-button *ngFor=\\\"let item of marital_status\\\" [checked]=\\\"item.checked\\\" [value]=\\\"item.value\\\">\\r\\n              {{item.option}}\\r\\n              &nbsp;\\r\\n            </mat-radio-button>\\r\\n          </mat-radio-group>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label>Medical History</mat-label>\\r\\n          <ng-container *ngFor=\\\"let item of disease_type; let i = index\\\">\\r\\n            <mat-checkbox [checked]=\\\"item.checked\\\" [value]=\\\"item.name\\\" disabled=\\\"true\\\">{{item.name}}\\r\\n            </mat-checkbox>\\r\\n          </ng-container>\\r\\n        </div>\\r\\n\\r\\n      </mat-card-content>\\r\\n\\r\\n      <mat-card-actions style=\\\"text-align: center;\\\">\\r\\n        <button type=\\\"button\\\" mat-raised-button color=\\\"warn\\\" (click)=\\\"onCancel()\\\">Cancel</button>\\r\\n      </mat-card-actions>\\r\\n\\r\\n    </form>\\r\\n\\r\\n  </mat-card>\\r\\n</section>\"","export default \"<div fxLayout fxLayout.lt-md=\\\"column wrap\\\" fxLayoutAlign=\\\"center center\\\" fxLayoutGap.gt-sm=\\\"250px\\\"\\r\\n    fxLayoutGap.lt.md=\\\"20px\\\">\\r\\n    <mat-form-field>\\r\\n        <input matInput type=\\\"text\\\" (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter Record\\\">\\r\\n    </mat-form-field>\\r\\n</div>\\r\\n\\r\\n<table mat-table [dataSource]=\\\"dataSource\\\" matSort>\\r\\n    <!--ng-container matColumnDef=\\\"id\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header width=\\\"150px\\\">ID</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">{{patient.id }}</td>\\r\\n    </ng-container-->\\r\\n    <ng-container matColumnDef=\\\"patientName\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header width=\\\"200px\\\">PatientName</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">{{patient.patientName.firstName}}&nbsp;{{patient.patientName.lastName}}\\r\\n        </td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"postalAddress\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header width=\\\"200px\\\">PostalAddress</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">\\r\\n            {{patient.postalAddress.line1}}<br>\\r\\n            {{patient.postalAddress.line2}}<br>\\r\\n            {{patient.postalAddress.city}}, {{patient.postalAddress.state}}<br>\\r\\n            {{patient.postalAddress.zip}}\\r\\n        </td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"gender\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header width=\\\"100px\\\">Gender</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">{{patient.gender}}</td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"dateOfBirth\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header width=\\\"100px\\\">Date of Birth</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">{{patient.dateOfBirth}}</td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"mailId\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header width=\\\"200px\\\">MailID</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">{{patient.mailId}}</td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"phone\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef width=\\\"100px\\\">PhoneNo</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">{{patient.phone}}</td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"maritalStatus\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header width=\\\"100px\\\">MaritalStatus</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">{{patient.maritalStatus}}</td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"medicalHistory\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>MedicalHistory</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">{{patient.medHistory}}</td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"details\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef width=\\\"100px\\\">Details</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">\\r\\n            <button mat-icon-button color=\\\"primary\\\" (click)=\\\"redirectToDetails(patient.id)\\\">\\r\\n                <mat-icon class=\\\"mat-18\\\">reorder</mat-icon>\\r\\n            </button>\\r\\n        </td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"update\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef width=\\\"100px\\\">Update</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">\\r\\n            <button mat-icon-button color=\\\"accent\\\" (click)=\\\"redirectToUpdate(patient.id)\\\">\\r\\n                <mat-icon class=\\\"mat-18\\\">system_update</mat-icon>\\r\\n            </button>\\r\\n        </td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"delete\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef width=\\\"100px\\\">Delete</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">\\r\\n            <button mat-icon-button color=\\\"warn\\\" (click)=\\\"redirectToDelete(patient.id)\\\">\\r\\n                <mat-icon class=\\\"mat-18\\\">delete</mat-icon>\\r\\n            </button>\\r\\n        </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n    <tr mat-row *matRowDef=\\\"let row; let even = even; columns: displayedColumns;\\\" [ngClass]=\\\"{gray: even}\\\"></tr>\\r\\n</table>\\r\\n\\r\\n<mat-paginator #paginator [pageIndex]=\\\"pageIndex\\\" [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\"\\r\\n    (page)=\\\"pageChange($event)\\\" showFirstLastButtons></mat-paginator>\"","export default \"<section fxLayout=\\\"row wrap\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n  <mat-card fxFlex=\\\"87%\\\" fxFlex.xs=\\\"100%\\\" style=\\\"border: 1;\\\">\\r\\n\\r\\n    <mat-card-title fxLayoutAlign=\\\"center center\\\">Update existing Patient</mat-card-title>\\r\\n\\r\\n    <form [formGroup]=\\\"registerForm\\\" autocomplete=\\\"off\\\" novalidate (ngSubmit)=\\\"register(registerForm.value)\\\">\\r\\n\\r\\n      <mat-card-content fxLayout=\\\"column wrap\\\">\\r\\n\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label><b>Patient Name</b></mat-label><br>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"FirstName\\\" formControlName=\\\"firstName\\\" id=\\\"firstName\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 50 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('firstName', 'required')\\\">Name is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('firstName', 'maxlength')\\\">You have more than 50 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"LastName\\\" formControlName=\\\"lastName\\\" id=\\\"lastName\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 50 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('lastName', 'required')\\\">Last Name is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('lastName', 'maxlength')\\\">You have more than 50 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label><b>Postal Address</b></mat-label><br>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Line1\\\" formControlName=\\\"line1\\\" id=\\\"line1\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 150 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('line1', 'required')\\\">Address Line 1 is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('line1', 'maxlength')\\\">You have more than 150 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Line2\\\" formControlName=\\\"line2\\\" id=\\\"line2\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 150 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('line2', 'required')\\\">Address Line 2 is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('line2', 'maxlength')\\\">You have more than 150 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <br>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"City\\\" formControlName=\\\"city\\\" id=\\\"city\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 50 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('city', 'required')\\\">City is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('city', 'maxlength')\\\">You have more than 50 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"State\\\" formControlName=\\\"state\\\" id=\\\"state\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 50 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('state', 'required')\\\">State is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('state', 'maxlength')\\\">You have more than 50 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Zip\\\" formControlName=\\\"zip\\\" id=\\\"zip\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 6 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('zip', 'required')\\\">Zip is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('zip', 'maxlength')\\\">You have more than 6 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label>Gender</mat-label>\\r\\n          <mat-radio-group formControlName=\\\"gender\\\" id=\\\"gender\\\">\\r\\n            <mat-radio-button *ngFor=\\\"let item of genders\\\" [checked]=\\\"item.checked\\\" [value]=\\\"item.value\\\">\\r\\n              {{item.option}}\\r\\n              &nbsp;\\r\\n            </mat-radio-button>\\r\\n          </mat-radio-group>\\r\\n          <br>\\r\\n          <mat-hint align=\\\"left\\\" class=\\\"mat-hint-style\\\">Gender is required</mat-hint>\\r\\n        </div>\\r\\n        <div>\\r\\n          <mat-form-field>\\r\\n            <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Select Date of Birth\\\" formControlName=\\\"dateOfBirth\\\"\\r\\n              id=\\\"dateOfBirth\\\" readonly (click)=\\\"picker.open()\\\">\\r\\n            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n            <mat-datepicker #picker></mat-datepicker>\\r\\n            <mat-hint align=\\\"left\\\">Date of Birth is required</mat-hint>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Email\\\" formControlName=\\\"mailId\\\" id=\\\"mailId\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 60 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('mailId', 'required')\\\">Mailid is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('mailId', 'maxlength')\\\">You have more than 60 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"PhoneNo\\\" formControlName=\\\"phone\\\" id=\\\"phone\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 6 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('phone', 'required')\\\">Phone Number is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('phone', 'maxlength')\\\">You have more than 10 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label>Marital Status</mat-label>\\r\\n          <mat-radio-group formControlName=\\\"maritalStatus\\\" id=\\\"maritalStatus\\\">\\r\\n            <mat-radio-button *ngFor=\\\"let item of marital_status\\\" [checked]=\\\"item.checked\\\" [value]=\\\"item.value\\\">\\r\\n              {{item.option}}\\r\\n              &nbsp;\\r\\n            </mat-radio-button>\\r\\n          </mat-radio-group>\\r\\n          <br>\\r\\n          <mat-hint align=\\\"left\\\" class=\\\"mat-hint-style\\\">Marital Status is required</mat-hint>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label>Medical History</mat-label>\\r\\n          <ng-container *ngFor=\\\"let item of disease_type; let i = index\\\">\\r\\n            <mat-checkbox [checked]=\\\"item.checked\\\" (change)=\\\"onChange($event)\\\" [value]=\\\"item.name\\\">{{item.name}}\\r\\n            </mat-checkbox>\\r\\n          </ng-container>\\r\\n          <br>\\r\\n          <mat-hint align=\\\"left\\\" class=\\\"mat-hint-style\\\">Medical History is required</mat-hint>\\r\\n        </div>\\r\\n\\r\\n      </mat-card-content>\\r\\n\\r\\n      <mat-card-actions style=\\\"text-align: center;\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"!registerForm.valid\\\">Update</button>\\r\\n        <!--button type=\\\"button\\\" mat-raised-button color=\\\"warn\\\" (click)=\\\"loginForm.reset()\\\">Reset</button-->\\r\\n        <button type=\\\"button\\\" mat-raised-button color=\\\"warn\\\" (click)=\\\"onCancel()\\\">Cancel</button>\\r\\n      </mat-card-actions>\\r\\n\\r\\n    </form>\\r\\n\\r\\n  </mat-card>\\r\\n</section>\"","import { HttpHeaders } from '@angular/common/http';\r\n\r\nexport const API_URL = 'https://healthplanner-biplasar-in.osc-sbx-exp-ap-15768375-f72ef11f3ab089a8c677044eb28292cd-0001.us-east.containers.appdomain.cloud';\r\n\r\nexport const GENDER: Array<any> = [\r\n    { option: \"Male\", value: \"Male\", checked: false },\r\n    { option: \"Female\", value: \"Female\", checked: false }\r\n];\r\n\r\nexport const MARITAL_STATUS: Array<any> = [\r\n    { option: \"Married\", value: \"Married\", checked: false },\r\n    { option: \"Unmarried\", value: \"Unmarried\", checked: false }\r\n];\r\n\r\nexport const DISEASE_TYPE: Array<any> = [\r\n    { name: \"None\", checked: false },\r\n    { name: \"Allergies\", checked: false },\r\n    { name: \"Anemia\", checked: false },\r\n    { name: \"Anxiety\", checked: false },\r\n    { name: \"Arthritis\", checked: false },\r\n    { name: \"Asthma\", checked: false },\r\n    { name: \"Cancer - Type\", checked: false },\r\n    { name: \"COPD (Emphysema)\", checked: false },\r\n    { name: \"Diabetes\", checked: false },\r\n    { name: \"Liver Disease\", checked: false },\r\n    { name: \"Osteoarthritis\", checked: false },\r\n    { name: \"Osteoporosis\", checked: false },\r\n    { name: \"Thyroid Disease\", checked: false }\r\n];\r\n\r\n","import { PatientName } from './patient_name';\r\nimport { PostalAddress } from './postal_address';\r\n\r\nexport class Patient {\r\n\r\n    id: String;\r\n    patientName: PatientName;\r\n    postalAddress: PostalAddress;\r\n    dateOfBirth: Date;\r\n    gender: String;\r\n    mailId: String;\r\n    phone: String;\r\n    maritalStatus: String;\r\n    medHistory: String[];\r\n}\r\n","\r\nexport class PatientName {\r\n    firstName: String;\r\n    lastName: String\r\n\r\n}","\r\nexport class PostalAddress {\r\n  line1: String;\r\n  line2: String;\r\n  city: String;\r\n  state: String;\r\n  zip: String;\r\n}","export default \"mat-form-field {\\r\\n  width: 350px;\\r\\n}\\r\\n\\r\\nmat-card-title {\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.mat-hint-style {\\r\\n  font-size: 75%;\\r\\n  font-weight: 400;\\r\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\r\\n  color: rgba(0, 0, 0, 0.54);\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGF0aWVudHMvcGF0aWVudC1jcmVhdGUvcGF0aWVudC1jcmVhdGUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxnQkFBZ0I7RUFDaEIsaURBQWlEO0VBQ2pELDBCQUEwQjtBQUM1QiIsImZpbGUiOiJzcmMvYXBwL3BhdGllbnRzL3BhdGllbnQtY3JlYXRlL3BhdGllbnQtY3JlYXRlLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJtYXQtZm9ybS1maWVsZCB7XHJcbiAgd2lkdGg6IDM1MHB4O1xyXG59XHJcblxyXG5tYXQtY2FyZC10aXRsZSB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG4ubWF0LWhpbnQtc3R5bGUge1xyXG4gIGZvbnQtc2l6ZTogNzUlO1xyXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgZm9udC1mYW1pbHk6IFJvYm90bywgXCJIZWx2ZXRpY2EgTmV1ZVwiLCBzYW5zLXNlcmlmO1xyXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNTQpO1xyXG59XHJcbiJdfQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { PatientService } from 'src/app/services/patient.service';\r\nimport { Patient } from 'src/app/model/patient';\r\nimport { PatientName } from 'src/app/model/patient_name';\r\nimport { PostalAddress } from 'src/app/model/postal_address';\r\nimport { GENDER, MARITAL_STATUS, DISEASE_TYPE } from 'src/app/constant';\r\nimport { MessageBox, MessageBoxButton } from 'src/app/shared/message-box';\r\n\r\n@Component({\r\n  selector: 'app-patient-create',\r\n  templateUrl: './patient-create.component.html',\r\n  styleUrls: ['./patient-create.component.css']\r\n})\r\nexport class PatientCreateComponent implements OnInit {\r\n\r\n  public registerForm: FormGroup;\r\n  public genders = GENDER;\r\n  public marital_status = MARITAL_STATUS;\r\n  public disease_type = DISEASE_TYPE;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private service: PatientService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n    this.registerForm = new FormGroup({\r\n      firstName: new FormControl('', [Validators.required, Validators.maxLength(50)]),\r\n      lastName: new FormControl('', [Validators.required, Validators.maxLength(60)]),\r\n      line1: new FormControl('', [Validators.required, Validators.maxLength(150)]),\r\n      line2: new FormControl('', [Validators.required, Validators.maxLength(150)]),\r\n      city: new FormControl('', [Validators.required, Validators.maxLength(50)]),\r\n      state: new FormControl('', [Validators.required, Validators.maxLength(50)]),\r\n      zip: new FormControl('', [Validators.required, Validators.maxLength(6)]),\r\n      gender: new FormControl('', [Validators.required]),\r\n      dateOfBirth: new FormControl('', [Validators.required]),\r\n      mailId: new FormControl('', [Validators.required, Validators.maxLength(60)]),\r\n      phone: new FormControl('', [Validators.required, Validators.maxLength(60)]),\r\n      maritalStatus: new FormControl('', [Validators.required])\r\n    });\r\n\r\n  }\r\n\r\n  public hasError(controlName: string, errorName: string) {\r\n    return this.registerForm.controls[controlName].hasError(errorName);\r\n  }\r\n\r\n  public onCancel() {\r\n    //this.location.back();\r\n  }\r\n\r\n  public register(registerFormValue) {\r\n    if (this.registerForm.valid) {\r\n      var patient = new Patient;\r\n      var patientName = new PatientName;\r\n      patientName.firstName = registerFormValue.firstName;\r\n      patientName.lastName = registerFormValue.lastName;\r\n      patient.patientName = patientName;\r\n      var postalAddress = new PostalAddress;\r\n      postalAddress.line1 = registerFormValue.line1;\r\n      postalAddress.line2 = registerFormValue.line2;\r\n      postalAddress.city = registerFormValue.city;\r\n      postalAddress.state = registerFormValue.state;\r\n      postalAddress.zip = registerFormValue.zip;\r\n      patient.postalAddress = postalAddress;\r\n      patient.gender = registerFormValue.gender;\r\n      patient.dateOfBirth = registerFormValue.dateOfBirth;\r\n      patient.mailId = registerFormValue.mailId;\r\n      patient.phone = registerFormValue.phone;\r\n      patient.maritalStatus = registerFormValue.maritalStatus;\r\n      patient.medHistory = [];\r\n      for (var i = 0; i < this.disease_type.length; i++) {\r\n        if (this.disease_type[i].checked)\r\n          patient.medHistory.push(this.disease_type[i].name);\r\n      }\r\n      this.service.saveData(patient).subscribe(\r\n        response => {\r\n          MessageBox.show(this.dialog, \"Alert\", 'Successfully added the reord', MessageBoxButton.Ok, \"350px\")\r\n          this.registerForm.reset();\r\n        },\r\n        error => {\r\n          let errorMsg = '';\r\n          if (typeof error.error.message !== 'undefined')\r\n            errorMsg = error.error.message;\r\n          else if (typeof error.error !== 'undefined')\r\n            errorMsg = error.error;\r\n          else\r\n            errorMsg = error.message;\r\n          MessageBox.show(this.dialog, \"Error\", errorMsg, MessageBoxButton.Ok, \"350px\");\r\n        }\r\n      );\r\n    } else\r\n      MessageBox.show(this.dialog, \"Error\", 'Some Input data are invalid', MessageBoxButton.Ok, \"350px\");\r\n  }\r\n\r\n  onChange(event) {\r\n    for (var i = 0; i < this.disease_type.length; i++) {\r\n      if (this.disease_type[i].name == event.source.value) {\r\n        if (event.checked)\r\n          this.disease_type[i].checked = true;\r\n        else\r\n          this.disease_type[i].checked = false;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","export default \"mat-form-field {\\r\\n  width: 350px;\\r\\n}\\r\\n\\r\\nmat-card-title {\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.mat-hint-style {\\r\\n  font-size: 75%;\\r\\n  font-weight: 400;\\r\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\r\\n  color: rgba(0, 0, 0, 0.54);\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGF0aWVudHMvcGF0aWVudC1kZXRhaWxzL3BhdGllbnQtZGV0YWlscy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsY0FBYztFQUNkLGdCQUFnQjtFQUNoQixpREFBaUQ7RUFDakQsMEJBQTBCO0FBQzVCIiwiZmlsZSI6InNyYy9hcHAvcGF0aWVudHMvcGF0aWVudC1kZXRhaWxzL3BhdGllbnQtZGV0YWlscy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsibWF0LWZvcm0tZmllbGQge1xyXG4gIHdpZHRoOiAzNTBweDtcclxufVxyXG5cclxubWF0LWNhcmQtdGl0bGUge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5cclxuLm1hdC1oaW50LXN0eWxlIHtcclxuICBmb250LXNpemU6IDc1JTtcclxuICBmb250LXdlaWdodDogNDAwO1xyXG4gIGZvbnQtZmFtaWx5OiBSb2JvdG8sIFwiSGVsdmV0aWNhIE5ldWVcIiwgc2Fucy1zZXJpZjtcclxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjU0KTtcclxufVxyXG4iXX0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { Location } from '@angular/common';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { PatientService } from 'src/app/services/patient.service';\r\nimport { Patient } from 'src/app/model/patient';\r\nimport { GENDER, MARITAL_STATUS, DISEASE_TYPE } from 'src/app/constant';\r\nimport { MessageBox, MessageBoxButton } from 'src/app/shared/message-box';\r\n\r\n@Component({\r\n  selector: 'app-patient-details',\r\n  templateUrl: './patient-details.component.html',\r\n  styleUrls: ['./patient-details.component.css']\r\n})\r\nexport class PatientDetailsComponent implements OnInit {\r\n\r\n  constructor(\r\n    private activeRoute: ActivatedRoute,\r\n    private service: PatientService,\r\n    private dialog: MatDialog,\r\n    private location: Location) {\r\n  }\r\n\r\n  patient: Patient;\r\n  public registerForm: FormGroup;\r\n  public genders = GENDER;\r\n  public marital_status = MARITAL_STATUS;\r\n  public disease_type = DISEASE_TYPE;\r\n\r\n  ngOnInit() {\r\n\r\n    this.registerForm = new FormGroup({\r\n      firstName: new FormControl(''),\r\n      lastName: new FormControl(''),\r\n      line1: new FormControl(''),\r\n      line2: new FormControl(''),\r\n      city: new FormControl(''),\r\n      state: new FormControl(''),\r\n      zip: new FormControl(''),\r\n      gender: new FormControl(''),\r\n      dateOfBirth: new FormControl(''),\r\n      mailId: new FormControl(''),\r\n      phone: new FormControl(''),\r\n      maritalStatus: new FormControl('')\r\n    });\r\n    this.registerForm.disable();\r\n\r\n    let id: string = this.activeRoute.snapshot.params['id'];\r\n    this.service.getDataById(id).subscribe(\r\n      response => {\r\n        this.patient = response;\r\n        this.registerForm = new FormGroup({\r\n          firstName: new FormControl(this.patient.patientName.firstName),\r\n          lastName: new FormControl(this.patient.patientName.lastName),\r\n          line1: new FormControl(this.patient.postalAddress.line1),\r\n          line2: new FormControl(this.patient.postalAddress.line2),\r\n          city: new FormControl(this.patient.postalAddress.city),\r\n          state: new FormControl(this.patient.postalAddress.state),\r\n          zip: new FormControl(this.patient.postalAddress.zip),\r\n          gender: new FormControl(this.patient.gender),\r\n          dateOfBirth: new FormControl(this.patient.dateOfBirth),\r\n          mailId: new FormControl(this.patient.mailId),\r\n          phone: new FormControl(this.patient.phone),\r\n          maritalStatus: new FormControl(this.patient.maritalStatus)\r\n        });\r\n        this.registerForm.disable();\r\n        for (var i = 0; i < this.disease_type.length; i++) {\r\n          if (this.patient.medHistory.indexOf(this.disease_type[i].name) != -1) {\r\n            this.disease_type[i].checked = true;\r\n          }\r\n        }\r\n      },\r\n      error => {\r\n        let errorMsg = '';\r\n        if (typeof error.error.message !== 'undefined')\r\n          errorMsg = error.error.message;\r\n        else if (typeof error.error !== 'undefined')\r\n          errorMsg = error.error;\r\n        else\r\n          errorMsg = error.message;\r\n        MessageBox.show(this.dialog, \"Error\", errorMsg, MessageBoxButton.Ok, \"350px\");\r\n      }\r\n    );\r\n  }\r\n\r\n  onCancel() {\r\n    this.location.back();\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { PatientService } from '../../services/patient.service';\r\nimport { Patient } from '../../model/patient';\r\nimport { MatTableDataSource, MatSort, MatPaginator, MatDialog } from '@angular/material';\r\nimport { Router } from '@angular/router';\r\nimport { MessageBoxButton, MessageBox } from 'src/app/shared/message-box';\r\n\r\n@Component({\r\n  selector: 'app-patient-list',\r\n  templateUrl: './patient-list.component.html',\r\n  styles: []\r\n})\r\nexport class PatientListComponent implements OnInit {\r\n\r\n  constructor(\r\n    private service: PatientService,\r\n    private router: Router,\r\n    private dialog: MatDialog) {\r\n  }\r\n\r\n  public dialogConfig;\r\n  public displayedColumns = ['patientName', 'postalAddress', 'gender', 'dateOfBirth', 'mailId', 'phone', 'maritalStatus', 'medicalHistory',\r\n    'details', 'update', 'delete'];\r\n  public dataSource = new MatTableDataSource<Patient>();\r\n\r\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  pageIndex = 0;\r\n  totalLength: number = 0;\r\n  pageSize: number = 10;\r\n  pageSizeOptions: number[] = [5, 10, 25, 100];\r\n\r\n  ngOnInit() {\r\n\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n    this.dataSource.filterPredicate = (data, filter: string) => {\r\n      const accumulator = (currentTerm, key) => {\r\n        return this.nestedFilterCheck(currentTerm, data, key);\r\n      };\r\n      const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\r\n      const transformedFilter = filter.trim().toLowerCase();\r\n      return dataStr.indexOf(transformedFilter) !== -1;\r\n    }\r\n\r\n    this.getPatientList();\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  pageChange(event: any) {\r\n    /*this.pageIndex = event.pageIndex;\r\n    this.pageSize = event.pageSize\r\n    this.createTable();*/\r\n  }\r\n\r\n  public getPatientList() {\r\n\r\n    this.service.getData().subscribe(\r\n      response => {\r\n        this.dataSource.data = response.patients;\r\n      },\r\n      error => {\r\n        let errorMsg = '';\r\n        if (typeof error.error.message !== 'undefined')\r\n          errorMsg = error.error.message;\r\n        else if (typeof error.error !== 'undefined')\r\n          errorMsg = error.error;\r\n        else\r\n          errorMsg = error.message;\r\n        MessageBox.show(this.dialog, \"Error\", errorMsg, MessageBoxButton.Ok, \"350px\");\r\n      }\r\n    );\r\n  }\r\n\r\n  public redirectToDetails = (id: string) => {\r\n    let url: string = `/patient/details/${id}`;\r\n    this.router.navigate([url]);\r\n  }\r\n\r\n  public redirectToUpdate = (id: string) => {\r\n    let url: string = `/patient/update/${id}`;\r\n    this.router.navigate([url]);\r\n  }\r\n\r\n  public redirectToDelete = (id: string) => {\r\n    MessageBox.show(this.dialog, \"Confirm Action\", 'Do you want to delete the record ?', MessageBoxButton.YesNo, \"350px\")\r\n      .subscribe(result => {\r\n        const dialogResult = (result === undefined) ? \"none\" : result.result;\r\n        if (dialogResult == \"yes\") {\r\n          this.service.deleteData(id).subscribe(\r\n            response => {\r\n              MessageBox.show(this.dialog, \"Alert\", 'Successfully deleted the reord ' + id, MessageBoxButton.Ok, \"350px\")\r\n                .subscribe(result => {\r\n                  this.getPatientList();\r\n                });\r\n            },\r\n            error => {\r\n              let errorMsg = '';\r\n              if (typeof error.error.message !== 'undefined')\r\n                errorMsg = error.error.message;\r\n              else if (typeof error.error !== 'undefined')\r\n                errorMsg = error.error;\r\n              else\r\n                errorMsg = error.message;\r\n              MessageBox.show(this.dialog, \"Error\", errorMsg, MessageBoxButton.Ok, \"350px\");\r\n            }\r\n          );\r\n        }\r\n      });\r\n\r\n  }\r\n\r\n  nestedFilterCheck(search, data, key) {\r\n    if (typeof data[key] === 'object') {\r\n      for (const k in data[key]) {\r\n        if (data[key][k] !== null) {\r\n          search = this.nestedFilterCheck(search, data[key], k);\r\n        }\r\n      }\r\n    } else {\r\n      search += data[key];\r\n    }\r\n    return search;\r\n  }\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { PatientListComponent } from '../patients/patient-list/patient-list.component';\r\nimport { PatientDetailsComponent } from '../patients/patient-details/patient-details.component';\r\nimport { PatientCreateComponent } from '../patients/patient-create/patient-create.component';\r\nimport { PatientUpdateComponent } from '../patients/patient-update/patient-update.component';\r\n//import { PatientDeleteComponent } from '../patients/patient-delete/owner-delete.component';\r\n\r\nconst patientRoutes: Routes = [\r\n  { path: 'patients', component: PatientListComponent },\r\n  { path: 'details/:id', component: PatientDetailsComponent},\r\n  { path: 'create', component: PatientCreateComponent },\r\n  { path: 'update/:id', component: PatientUpdateComponent },\r\n  //{ path: 'delete/:id', component: PatientDeleteComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(patientRoutes)\r\n  ],\r\n  exports: [\r\n    RouterModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class PatientRoutingModule { }\r\n","export default \"mat-form-field {\\r\\n  width: 350px;\\r\\n}\\r\\n\\r\\nmat-card-title {\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.mat-hint-style {\\r\\n  font-size: 75%;\\r\\n  font-weight: 400;\\r\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\r\\n  color: rgba(0, 0, 0, 0.54);\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGF0aWVudHMvcGF0aWVudC11cGRhdGUvcGF0aWVudC11cGRhdGUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxnQkFBZ0I7RUFDaEIsaURBQWlEO0VBQ2pELDBCQUEwQjtBQUM1QiIsImZpbGUiOiJzcmMvYXBwL3BhdGllbnRzL3BhdGllbnQtdXBkYXRlL3BhdGllbnQtdXBkYXRlLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJtYXQtZm9ybS1maWVsZCB7XHJcbiAgd2lkdGg6IDM1MHB4O1xyXG59XHJcblxyXG5tYXQtY2FyZC10aXRsZSB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG4ubWF0LWhpbnQtc3R5bGUge1xyXG4gIGZvbnQtc2l6ZTogNzUlO1xyXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgZm9udC1mYW1pbHk6IFJvYm90bywgXCJIZWx2ZXRpY2EgTmV1ZVwiLCBzYW5zLXNlcmlmO1xyXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNTQpO1xyXG59XHJcbiJdfQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router'\r\nimport { Location } from '@angular/common';\r\nimport { PatientService } from 'src/app/services/patient.service';\r\nimport { Patient } from 'src/app/model/patient';\r\nimport { PatientName } from 'src/app/model/patient_name';\r\nimport { PostalAddress } from 'src/app/model/postal_address';\r\nimport { GENDER, MARITAL_STATUS, DISEASE_TYPE } from 'src/app/constant';\r\nimport { MessageBox, MessageBoxButton } from 'src/app/shared/message-box';\r\n\r\n@Component({\r\n  selector: 'app-patient-update',\r\n  templateUrl: './patient-update.component.html',\r\n  styleUrls: ['./patient-update.component.css']\r\n})\r\nexport class PatientUpdateComponent implements OnInit {\r\n\r\n  public patientId: String;\r\n  patient: Patient;\r\n  public registerForm: FormGroup;\r\n  public genders = GENDER;\r\n  public marital_status = MARITAL_STATUS;\r\n  public disease_type = DISEASE_TYPE;\r\n\r\n  constructor(\r\n    private activeRoute: ActivatedRoute,\r\n    private dialog: MatDialog,\r\n    private service: PatientService,\r\n    private location: Location\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n    this.registerForm = new FormGroup({\r\n      firstName: new FormControl(''),\r\n      lastName: new FormControl(''),\r\n      line1: new FormControl(''),\r\n      line2: new FormControl(''),\r\n      city: new FormControl(''),\r\n      state: new FormControl(''),\r\n      zip: new FormControl(''),\r\n      gender: new FormControl(''),\r\n      dateOfBirth: new FormControl(''),\r\n      mailId: new FormControl(''),\r\n      phone: new FormControl(''),\r\n      maritalStatus: new FormControl('')\r\n    });\r\n\r\n    let id: string = this.activeRoute.snapshot.params['id'];\r\n    this.patientId = id;\r\n    this.service.getDataById(id).subscribe(\r\n      response => {\r\n        this.patient = response;\r\n        this.registerForm = new FormGroup({\r\n          firstName: new FormControl(this.patient.patientName.firstName, [Validators.required, Validators.maxLength(50)]),\r\n          lastName: new FormControl(this.patient.patientName.lastName, [Validators.required, Validators.maxLength(60)]),\r\n          line1: new FormControl(this.patient.postalAddress.line1, [Validators.required, Validators.maxLength(150)]),\r\n          line2: new FormControl(this.patient.postalAddress.line2, [Validators.required, Validators.maxLength(150)]),\r\n          city: new FormControl(this.patient.postalAddress.city, [Validators.required, Validators.maxLength(50)]),\r\n          state: new FormControl(this.patient.postalAddress.state, [Validators.required, Validators.maxLength(50)]),\r\n          zip: new FormControl(this.patient.postalAddress.zip, [Validators.required, Validators.maxLength(6)]),\r\n          gender: new FormControl(this.patient.gender, [Validators.required]),\r\n          dateOfBirth: new FormControl(this.patient.dateOfBirth, [Validators.required]),\r\n          mailId: new FormControl(this.patient.mailId, [Validators.required, Validators.maxLength(60)]),\r\n          phone: new FormControl(this.patient.phone, [Validators.required, Validators.maxLength(60)]),\r\n          maritalStatus: new FormControl(this.patient.maritalStatus, [Validators.required])\r\n        });\r\n        for (var i = 0; i < this.disease_type.length; i++) {\r\n          if (this.patient.medHistory.indexOf(this.disease_type[i].name) != -1) {\r\n            this.disease_type[i].checked = true;\r\n          }\r\n        }\r\n      },\r\n      error => {\r\n        this.registerForm.disable();\r\n        let errorMsg = '';\r\n        if (typeof error.error.message !== 'undefined')\r\n          errorMsg = error.error.message;\r\n        else if (typeof error.error !== 'undefined')\r\n          errorMsg = error.error;\r\n        else\r\n          errorMsg = error.message;\r\n        MessageBox.show(this.dialog, \"Error\", errorMsg, MessageBoxButton.Ok, \"350px\");\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  public hasError(controlName: string, errorName: string) {\r\n    return this.registerForm.controls[controlName].hasError(errorName);\r\n  }\r\n\r\n  public register(registerFormValue) {\r\n    if (this.registerForm.valid) {\r\n      var patient = new Patient;\r\n      patient.id = this.patientId;\r\n      var patientName = new PatientName;\r\n      patientName.firstName = registerFormValue.firstName;\r\n      patientName.lastName = registerFormValue.lastName;\r\n      patient.patientName = patientName;\r\n      var postalAddress = new PostalAddress;\r\n      postalAddress.line1 = registerFormValue.line1;\r\n      postalAddress.line2 = registerFormValue.line2;\r\n      postalAddress.city = registerFormValue.city;\r\n      postalAddress.state = registerFormValue.state;\r\n      postalAddress.zip = registerFormValue.zip;\r\n      patient.postalAddress = postalAddress;\r\n      patient.gender = registerFormValue.gender;\r\n      patient.dateOfBirth = registerFormValue.dateOfBirth;\r\n      patient.mailId = registerFormValue.mailId;\r\n      patient.phone = registerFormValue.phone;\r\n      patient.maritalStatus = registerFormValue.maritalStatus;\r\n      patient.medHistory = [];\r\n      for (var i = 0; i < this.disease_type.length; i++) {\r\n        if (this.disease_type[i].checked)\r\n          patient.medHistory.push(this.disease_type[i].name);\r\n      }\r\n      this.service.updateData(this.patientId, patient).subscribe(\r\n        response => {\r\n          MessageBox.show(this.dialog, \"Alert\", 'Successfully updated the reord ' + this.patientId, MessageBoxButton.Ok, \"350px\");\r\n        },\r\n        error => {\r\n          let errorMsg = '';\r\n          if (typeof error.error.message !== 'undefined')\r\n            errorMsg = error.error.message;\r\n          else if (typeof error.error !== 'undefined')\r\n            errorMsg = error.error;\r\n          else\r\n            errorMsg = error.message;\r\n          MessageBox.show(this.dialog, \"Error\", errorMsg, MessageBoxButton.Ok, \"350px\");\r\n        }\r\n      );\r\n    } else\r\n      MessageBox.show(this.dialog, \"Error\", 'Some Input data are invalid', MessageBoxButton.Ok, \"350px\");\r\n  }\r\n\r\n  onChange(event) {\r\n    for (var i = 0; i < this.disease_type.length; i++) {\r\n      if (this.disease_type[i].name == event.source.value) {\r\n        if (event.checked)\r\n          this.disease_type[i].checked = true;\r\n        else\r\n          this.disease_type[i].checked = false;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  onCancel() {\r\n    this.location.back();\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\nimport { PatientListComponent } from './patient-list/patient-list.component';\r\nimport { PatientRoutingModule } from './patient-routing.module';\r\nimport { PatientDetailsComponent } from './patient-details/patient-details.component';\r\nimport { PatientCreateComponent } from './patient-create/patient-create.component';\r\nimport { PatientUpdateComponent } from './patient-update/patient-update.component';\r\n//import { PatientDeleteComponent } from './patient-delete/patient-delete.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    PatientRoutingModule,\r\n    ReactiveFormsModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    PatientListComponent, \r\n    PatientDetailsComponent, \r\n    PatientCreateComponent, \r\n    PatientUpdateComponent, \r\n    //PatientDeleteComponent\r\n  ]\r\n})\r\nexport class PatientModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { API_URL } from '../constant';\r\nimport { Patient } from '../model/patient';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PatientService {\r\n\r\n  //url = 'http://localhost:4000';\r\n  baseURL = 'http://localhost:8080';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getData(): Observable<any> {\r\n    //return this.http.get(`${this.url}/patients`);\r\n    return this.http.get(`${API_URL}/user/get`);\r\n  }\r\n\r\n  getDataById(id: String): Observable<any> {\r\n    return this.http.get(`${API_URL}/user/get/${id}`);\r\n  }\r\n\r\n  saveData(patient: Patient): Observable<any> {\r\n    return this.http.post(`${API_URL}/user/create`, patient);\r\n  }\r\n\r\n  updateData(id: String, patient: Patient): Observable<any> {\r\n    return this.http.put(`${API_URL}/user/update/${id}`, patient);\r\n  }\r\n\r\n  deleteData(id: string): Observable<any> {\r\n    return this.http.delete(`${API_URL}/user/delete/${id}`);\r\n  }\r\n}"],"sourceRoot":"webpack:///"}