{"version":3,"sources":["src/app/patients/patient-create/patient-create.component.html","src/app/patients/patient-details/patient-details.component.html","src/app/patients/patient-list/patient-list.component.html","src/app/patients/patient-update/patient-update.component.html","src/app/constant.ts","src/app/model/patient.ts","src/app/model/patient_name.ts","src/app/model/postal_address.ts","src/app/patients/patient-create/patient-create.component.css","src/app/patients/patient-create/patient-create.component.ts","src/app/patients/patient-details/patient-details.component.css","src/app/patients/patient-details/patient-details.component.ts","src/app/patients/patient-list/patient-list.component.ts","src/app/patients/patient-routing.module.ts","src/app/patients/patient-update/patient-update.component.css","src/app/patients/patient-update/patient-update.component.ts","src/app/patients/patient.module.ts","src/app/services/patient.service.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<section fxLayout=\\\"row wrap\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n  <mat-card fxFlex=\\\"87%\\\" fxFlex.xs=\\\"100%\\\" style=\\\"border: 1;\\\">\\r\\n\\r\\n    <mat-card-title fxLayoutAlign=\\\"center center\\\">Register a new Patient</mat-card-title>\\r\\n\\r\\n    <form [formGroup]=\\\"registerForm\\\" autocomplete=\\\"off\\\" novalidate (ngSubmit)=\\\"register(registerForm.value)\\\">\\r\\n\\r\\n      <mat-card-content fxLayout=\\\"column wrap\\\">\\r\\n\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label><b>Patient Name</b></mat-label><br>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"FirstName\\\" formControlName=\\\"firstName\\\" id=\\\"firstName\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 50 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('firstName', 'required')\\\">Name is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('firstName', 'maxlength')\\\">You have more than 50 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"LastName\\\" formControlName=\\\"lastName\\\" id=\\\"lastName\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 50 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('lastName', 'required')\\\">Last Name is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('lastName', 'maxlength')\\\">You have more than 50 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label><b>Postal Address</b></mat-label><br>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Line1\\\" formControlName=\\\"line1\\\" id=\\\"line1\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 150 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('line1', 'required')\\\">Address Line 1 is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('line1', 'maxlength')\\\">You have more than 150 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Line2\\\" formControlName=\\\"line2\\\" id=\\\"line2\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 150 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('line2', 'required')\\\">Address Line 2 is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('line2', 'maxlength')\\\">You have more than 150 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <br>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"City\\\" formControlName=\\\"city\\\" id=\\\"city\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 50 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('city', 'required')\\\">City is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('city', 'maxlength')\\\">You have more than 50 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"State\\\" formControlName=\\\"state\\\" id=\\\"state\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 50 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('state', 'required')\\\">State is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('state', 'maxlength')\\\">You have more than 50 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Zip\\\" formControlName=\\\"zip\\\" id=\\\"zip\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 6 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('zip', 'required')\\\">Zip is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('zip', 'maxlength')\\\">You have more than 6 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label>Gender</mat-label>\\r\\n          <mat-radio-group formControlName=\\\"gender\\\" id=\\\"gender\\\">\\r\\n            <mat-radio-button *ngFor=\\\"let item of genders\\\" [value]=\\\"item.value\\\">\\r\\n              {{item.option}}\\r\\n              &nbsp;\\r\\n            </mat-radio-button>\\r\\n          </mat-radio-group>\\r\\n          <br>\\r\\n          <mat-hint align=\\\"left\\\" class=\\\"mat-hint-style\\\">Gender is required</mat-hint>\\r\\n        </div>\\r\\n        <div>\\r\\n          <mat-form-field>\\r\\n            <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Select Date of Birth\\\" formControlName=\\\"dateOfBirth\\\"\\r\\n              id=\\\"dateOfBirth\\\" readonly (click)=\\\"picker.open()\\\">\\r\\n            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n            <mat-datepicker #picker></mat-datepicker>\\r\\n            <mat-hint align=\\\"left\\\">Date of Birth is required</mat-hint>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Email\\\" formControlName=\\\"mailId\\\" id=\\\"mailId\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 60 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('mailId', 'required')\\\">Mailid is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('mailId', 'maxlength')\\\">You have more than 60 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"PhoneNo\\\" formControlName=\\\"phone\\\" id=\\\"phone\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 6 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('phone', 'required')\\\">Phone Number is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('phone', 'maxlength')\\\">You have more than 10 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label>Marital Status</mat-label>\\r\\n          <mat-radio-group formControlName=\\\"maritalStatus\\\" id=\\\"maritalStatus\\\">\\r\\n            <mat-radio-button *ngFor=\\\"let item of marital_status\\\" [value]=\\\"item.value\\\">\\r\\n              {{item.option}}\\r\\n              &nbsp;\\r\\n            </mat-radio-button>\\r\\n          </mat-radio-group>\\r\\n          <br>\\r\\n          <mat-hint align=\\\"left\\\" class=\\\"mat-hint-style\\\">Marital Status is required</mat-hint>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label>Medical History</mat-label>\\r\\n          <ng-container *ngFor=\\\"let item of disease_type; let i = index\\\">\\r\\n            <mat-checkbox (change)=\\\"onChange($event)\\\" [value]=\\\"item.name\\\">{{item.name}}\\r\\n            </mat-checkbox>\\r\\n          </ng-container>\\r\\n          <br>\\r\\n          <mat-hint align=\\\"left\\\" class=\\\"mat-hint-style\\\">Medical History is required</mat-hint>\\r\\n        </div>\\r\\n\\r\\n      </mat-card-content>\\r\\n\\r\\n      <mat-card-actions style=\\\"text-align: center;\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"!registerForm.valid\\\">Register</button>\\r\\n        <button type=\\\"button\\\" mat-raised-button color=\\\"warn\\\" (click)=\\\"loginForm.reset()\\\">Reset</button>\\r\\n      </mat-card-actions>\\r\\n\\r\\n    </form>\\r\\n\\r\\n  </mat-card>\\r\\n</section>\"","export default \"<section fxLayout=\\\"row wrap\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n  <mat-card fxFlex=\\\"87%\\\" fxFlex.xs=\\\"100%\\\" style=\\\"border: 1;\\\">\\r\\n\\r\\n    <mat-card-title fxLayoutAlign=\\\"center center\\\">Registered Patient Details</mat-card-title>\\r\\n\\r\\n    <form [formGroup]=\\\"registerForm\\\" autocomplete=\\\"off\\\" novalidate>\\r\\n\\r\\n      <mat-card-content fxLayout=\\\"column wrap\\\">\\r\\n\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label><b>Patient Name</b></mat-label><br>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"FirstName\\\" formControlName=\\\"firstName\\\" id=\\\"firstName\\\">\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"LastName\\\" formControlName=\\\"lastName\\\" id=\\\"lastName\\\">\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label><b>Postal Address</b></mat-label><br>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Line1\\\" formControlName=\\\"line1\\\" id=\\\"line1\\\">\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Line2\\\" formControlName=\\\"line2\\\" id=\\\"line2\\\">\\r\\n          </mat-form-field>\\r\\n          <br>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"City\\\" formControlName=\\\"city\\\" id=\\\"city\\\">\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"State\\\" formControlName=\\\"state\\\" id=\\\"state\\\">\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Zip\\\" formControlName=\\\"zip\\\" id=\\\"zip\\\">\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label>Gender</mat-label>\\r\\n          <mat-radio-group formControlName=\\\"gender\\\" id=\\\"gender\\\">\\r\\n            <mat-radio-button *ngFor=\\\"let item of genders\\\" [checked]=\\\"item.checked\\\" [value]=\\\"item.value\\\">\\r\\n              {{item.option}}\\r\\n              &nbsp;\\r\\n            </mat-radio-button>\\r\\n          </mat-radio-group>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Date of Birth\\\" formControlName=\\\"dateOfBirth\\\"\\r\\n              id=\\\"dateOfBirth\\\">\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Email\\\" formControlName=\\\"mailId\\\" id=\\\"mailId\\\">\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"PhoneNo\\\" formControlName=\\\"phone\\\" id=\\\"phone\\\">\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label>Marital Status</mat-label>\\r\\n          <mat-radio-group formControlName=\\\"maritalStatus\\\" id=\\\"maritalStatus\\\">\\r\\n            <mat-radio-button *ngFor=\\\"let item of marital_status\\\" [checked]=\\\"item.checked\\\" [value]=\\\"item.value\\\">\\r\\n              {{item.option}}\\r\\n              &nbsp;\\r\\n            </mat-radio-button>\\r\\n          </mat-radio-group>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label>Medical History</mat-label>\\r\\n          <ng-container *ngFor=\\\"let item of disease_type; let i = index\\\">\\r\\n            <mat-checkbox [checked]=\\\"item.checked\\\" [value]=\\\"item.name\\\" disabled=\\\"true\\\">{{item.name}}\\r\\n            </mat-checkbox>\\r\\n          </ng-container>\\r\\n        </div>\\r\\n\\r\\n      </mat-card-content>\\r\\n\\r\\n      <mat-card-actions style=\\\"text-align: center;\\\">\\r\\n        <button type=\\\"button\\\" mat-raised-button color=\\\"warn\\\" (click)=\\\"onCancel()\\\">Cancel</button>\\r\\n      </mat-card-actions>\\r\\n\\r\\n    </form>\\r\\n\\r\\n  </mat-card>\\r\\n</section>\"","export default \"<div fxLayout fxLayout.lt-md=\\\"column wrap\\\" fxLayoutAlign=\\\"center center\\\" fxLayoutGap.gt-sm=\\\"250px\\\"\\r\\n    fxLayoutGap.lt.md=\\\"20px\\\">\\r\\n    <mat-form-field>\\r\\n        <input matInput type=\\\"text\\\" (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter Record\\\">\\r\\n    </mat-form-field>\\r\\n</div>\\r\\n\\r\\n<table mat-table [dataSource]=\\\"dataSource\\\" matSort>\\r\\n    <!--ng-container matColumnDef=\\\"id\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header width=\\\"150px\\\">ID</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">{{patient.id }}</td>\\r\\n    </ng-container-->\\r\\n    <ng-container matColumnDef=\\\"patientName\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header width=\\\"200px\\\">PatientName</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">{{patient.patientName.firstName}}&nbsp;{{patient.patientName.lastName}}\\r\\n        </td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"postalAddress\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header width=\\\"200px\\\">PostalAddress</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">\\r\\n            {{patient.postalAddress.line1}}<br>\\r\\n            {{patient.postalAddress.line2}}<br>\\r\\n            {{patient.postalAddress.city}}, {{patient.postalAddress.state}}<br>\\r\\n            {{patient.postalAddress.zip}}\\r\\n        </td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"gender\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header width=\\\"100px\\\">Gender</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">{{patient.gender}}</td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"dateOfBirth\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header width=\\\"100px\\\">Date of Birth</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">{{patient.dateOfBirth}}</td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"mailId\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header width=\\\"200px\\\">MailID</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">{{patient.mailId}}</td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"phone\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef width=\\\"100px\\\">PhoneNo</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">{{patient.phone}}</td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"maritalStatus\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header width=\\\"100px\\\">MaritalStatus</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">{{patient.maritalStatus}}</td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"medicalHistory\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>MedicalHistory</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">{{patient.medHistory}}</td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"details\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef width=\\\"100px\\\">Details</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">\\r\\n            <button mat-icon-button color=\\\"primary\\\" (click)=\\\"redirectToDetails(patient.id)\\\">\\r\\n                <mat-icon class=\\\"mat-18\\\">reorder</mat-icon>\\r\\n            </button>\\r\\n        </td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"update\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef width=\\\"100px\\\">Update</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">\\r\\n            <button mat-icon-button color=\\\"accent\\\" (click)=\\\"redirectToUpdate(patient.id)\\\">\\r\\n                <mat-icon class=\\\"mat-18\\\">system_update</mat-icon>\\r\\n            </button>\\r\\n        </td>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"delete\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef width=\\\"100px\\\">Delete</th>\\r\\n        <td mat-cell *matCellDef=\\\"let patient\\\">\\r\\n            <button mat-icon-button color=\\\"warn\\\" (click)=\\\"redirectToDelete(patient.id)\\\">\\r\\n                <mat-icon class=\\\"mat-18\\\">delete</mat-icon>\\r\\n            </button>\\r\\n        </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n    <tr mat-row *matRowDef=\\\"let row; let even = even; columns: displayedColumns;\\\" [ngClass]=\\\"{gray: even}\\\"></tr>\\r\\n</table>\\r\\n\\r\\n<mat-paginator #paginator [pageIndex]=\\\"pageIndex\\\" [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\"\\r\\n    (page)=\\\"pageChange($event)\\\" showFirstLastButtons></mat-paginator>\"","export default \"<section fxLayout=\\\"row wrap\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n  <mat-card fxFlex=\\\"87%\\\" fxFlex.xs=\\\"100%\\\" style=\\\"border: 1;\\\">\\r\\n\\r\\n    <mat-card-title fxLayoutAlign=\\\"center center\\\">Update existing Patient</mat-card-title>\\r\\n\\r\\n    <form [formGroup]=\\\"registerForm\\\" autocomplete=\\\"off\\\" novalidate (ngSubmit)=\\\"register(registerForm.value)\\\">\\r\\n\\r\\n      <mat-card-content fxLayout=\\\"column wrap\\\">\\r\\n\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label><b>Patient Name</b></mat-label><br>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"FirstName\\\" formControlName=\\\"firstName\\\" id=\\\"firstName\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 50 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('firstName', 'required')\\\">Name is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('firstName', 'maxlength')\\\">You have more than 50 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"LastName\\\" formControlName=\\\"lastName\\\" id=\\\"lastName\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 50 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('lastName', 'required')\\\">Last Name is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('lastName', 'maxlength')\\\">You have more than 50 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label><b>Postal Address</b></mat-label><br>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Line1\\\" formControlName=\\\"line1\\\" id=\\\"line1\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 150 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('line1', 'required')\\\">Address Line 1 is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('line1', 'maxlength')\\\">You have more than 150 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Line2\\\" formControlName=\\\"line2\\\" id=\\\"line2\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 150 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('line2', 'required')\\\">Address Line 2 is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('line2', 'maxlength')\\\">You have more than 150 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <br>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"City\\\" formControlName=\\\"city\\\" id=\\\"city\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 50 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('city', 'required')\\\">City is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('city', 'maxlength')\\\">You have more than 50 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"State\\\" formControlName=\\\"state\\\" id=\\\"state\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 50 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('state', 'required')\\\">State is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('state', 'maxlength')\\\">You have more than 50 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Zip\\\" formControlName=\\\"zip\\\" id=\\\"zip\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 6 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('zip', 'required')\\\">Zip is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('zip', 'maxlength')\\\">You have more than 6 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label>Gender</mat-label>\\r\\n          <mat-radio-group formControlName=\\\"gender\\\" id=\\\"gender\\\">\\r\\n            <mat-radio-button *ngFor=\\\"let item of genders\\\" [checked]=\\\"item.checked\\\" [value]=\\\"item.value\\\">\\r\\n              {{item.option}}\\r\\n              &nbsp;\\r\\n            </mat-radio-button>\\r\\n          </mat-radio-group>\\r\\n          <br>\\r\\n          <mat-hint align=\\\"left\\\" class=\\\"mat-hint-style\\\">Gender is required</mat-hint>\\r\\n        </div>\\r\\n        <div>\\r\\n          <mat-form-field>\\r\\n            <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Select Date of Birth\\\" formControlName=\\\"dateOfBirth\\\"\\r\\n              id=\\\"dateOfBirth\\\" readonly (click)=\\\"picker.open()\\\">\\r\\n            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n            <mat-datepicker #picker></mat-datepicker>\\r\\n            <mat-hint align=\\\"left\\\">Date of Birth is required</mat-hint>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Email\\\" formControlName=\\\"mailId\\\" id=\\\"mailId\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 60 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('mailId', 'required')\\\">Mailid is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('mailId', 'maxlength')\\\">You have more than 60 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n          <mat-form-field>\\r\\n            <input matInput type=\\\"text\\\" placeholder=\\\"PhoneNo\\\" formControlName=\\\"phone\\\" id=\\\"phone\\\">\\r\\n            <mat-hint align=\\\"left\\\">Not more then 6 characters long.</mat-hint>\\r\\n            <mat-error *ngIf=\\\"hasError('phone', 'required')\\\">Phone Number is required</mat-error>\\r\\n            <mat-error *ngIf=\\\"hasError('phone', 'maxlength')\\\">You have more than 10 characters</mat-error>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label>Marital Status</mat-label>\\r\\n          <mat-radio-group formControlName=\\\"maritalStatus\\\" id=\\\"maritalStatus\\\">\\r\\n            <mat-radio-button *ngFor=\\\"let item of marital_status\\\" [checked]=\\\"item.checked\\\" [value]=\\\"item.value\\\">\\r\\n              {{item.option}}\\r\\n              &nbsp;\\r\\n            </mat-radio-button>\\r\\n          </mat-radio-group>\\r\\n          <br>\\r\\n          <mat-hint align=\\\"left\\\" class=\\\"mat-hint-style\\\">Marital Status is required</mat-hint>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div flex fxLayoutGap=\\\"30px\\\">\\r\\n          <mat-label>Medical History</mat-label>\\r\\n          <ng-container *ngFor=\\\"let item of disease_type; let i = index\\\">\\r\\n            <mat-checkbox [checked]=\\\"item.checked\\\" (change)=\\\"onChange($event)\\\" [value]=\\\"item.name\\\">{{item.name}}\\r\\n            </mat-checkbox>\\r\\n          </ng-container>\\r\\n          <br>\\r\\n          <mat-hint align=\\\"left\\\" class=\\\"mat-hint-style\\\">Medical History is required</mat-hint>\\r\\n        </div>\\r\\n\\r\\n      </mat-card-content>\\r\\n\\r\\n      <mat-card-actions style=\\\"text-align: center;\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"!registerForm.valid\\\">Update</button>\\r\\n        <!--button type=\\\"button\\\" mat-raised-button color=\\\"warn\\\" (click)=\\\"loginForm.reset()\\\">Reset</button-->\\r\\n        <button type=\\\"button\\\" mat-raised-button color=\\\"warn\\\" (click)=\\\"onCancel()\\\">Cancel</button>\\r\\n      </mat-card-actions>\\r\\n\\r\\n    </form>\\r\\n\\r\\n  </mat-card>\\r\\n</section>\"","import { HttpHeaders } from '@angular/common/http';\r\n\r\nexport const API_URL = 'https://healthplanner-biplasar-in.osc-sbx-exp-ap-15768375-f72ef11f3ab089a8c677044eb28292cd-0001.us-east.containers.appdomain.cloud';\r\n\r\nexport const GENDER: Array<any> = [\r\n    { option: \"Male\", value: \"Male\", checked: false },\r\n    { option: \"Female\", value: \"Female\", checked: false }\r\n];\r\n\r\nexport const MARITAL_STATUS: Array<any> = [\r\n    { option: \"Married\", value: \"Married\", checked: false },\r\n    { option: \"Unmarried\", value: \"Unmarried\", checked: false }\r\n];\r\n\r\nexport const DISEASE_TYPE: Array<any> = [\r\n    { name: \"None\", checked: false },\r\n    { name: \"Allergies\", checked: false },\r\n    { name: \"Anemia\", checked: false },\r\n    { name: \"Anxiety\", checked: false },\r\n    { name: \"Arthritis\", checked: false },\r\n    { name: \"Asthma\", checked: false },\r\n    { name: \"Cancer - Type\", checked: false },\r\n    { name: \"COPD (Emphysema)\", checked: false },\r\n    { name: \"Diabetes\", checked: false },\r\n    { name: \"Liver Disease\", checked: false },\r\n    { name: \"Osteoarthritis\", checked: false },\r\n    { name: \"Osteoporosis\", checked: false },\r\n    { name: \"Thyroid Disease\", checked: false }\r\n];\r\n\r\n","import { PatientName } from './patient_name';\r\nimport { PostalAddress } from './postal_address';\r\n\r\nexport class Patient {\r\n\r\n    id: String;\r\n    patientName: PatientName;\r\n    postalAddress: PostalAddress;\r\n    dateOfBirth: Date;\r\n    gender: String;\r\n    mailId: String;\r\n    phone: String;\r\n    maritalStatus: String;\r\n    medHistory: String[];\r\n}\r\n","\r\nexport class PatientName {\r\n    firstName: String;\r\n    lastName: String\r\n\r\n}","\r\nexport class PostalAddress {\r\n  line1: String;\r\n  line2: String;\r\n  city: String;\r\n  state: String;\r\n  zip: String;\r\n}","export default \"mat-form-field {\\r\\n  width: 350px;\\r\\n}\\r\\n\\r\\nmat-card-title {\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.mat-hint-style {\\r\\n  font-size: 75%;\\r\\n  font-weight: 400;\\r\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\r\\n  color: rgba(0, 0, 0, 0.54);\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGF0aWVudHMvcGF0aWVudC1jcmVhdGUvcGF0aWVudC1jcmVhdGUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxnQkFBZ0I7RUFDaEIsaURBQWlEO0VBQ2pELDBCQUEwQjtBQUM1QiIsImZpbGUiOiJzcmMvYXBwL3BhdGllbnRzL3BhdGllbnQtY3JlYXRlL3BhdGllbnQtY3JlYXRlLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJtYXQtZm9ybS1maWVsZCB7XHJcbiAgd2lkdGg6IDM1MHB4O1xyXG59XHJcblxyXG5tYXQtY2FyZC10aXRsZSB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG4ubWF0LWhpbnQtc3R5bGUge1xyXG4gIGZvbnQtc2l6ZTogNzUlO1xyXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgZm9udC1mYW1pbHk6IFJvYm90bywgXCJIZWx2ZXRpY2EgTmV1ZVwiLCBzYW5zLXNlcmlmO1xyXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNTQpO1xyXG59XHJcbiJdfQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { PatientService } from 'src/app/services/patient.service';\r\nimport { Patient } from 'src/app/model/patient';\r\nimport { PatientName } from 'src/app/model/patient_name';\r\nimport { PostalAddress } from 'src/app/model/postal_address';\r\nimport { GENDER, MARITAL_STATUS, DISEASE_TYPE } from 'src/app/constant';\r\nimport { MessageBox, MessageBoxButton } from 'src/app/shared/message-box';\r\n\r\n@Component({\r\n  selector: 'app-patient-create',\r\n  templateUrl: './patient-create.component.html',\r\n  styleUrls: ['./patient-create.component.css']\r\n})\r\nexport class PatientCreateComponent implements OnInit {\r\n\r\n  public registerForm: FormGroup;\r\n  public genders = GENDER;\r\n  public marital_status = MARITAL_STATUS;\r\n  public disease_type = DISEASE_TYPE;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private service: PatientService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n    this.registerForm = new FormGroup({\r\n      firstName: new FormControl('', [Validators.required, Validators.maxLength(50)]),\r\n      lastName: new FormControl('', [Validators.required, Validators.maxLength(60)]),\r\n      line1: new FormControl('', [Validators.required, Validators.maxLength(150)]),\r\n      line2: new FormControl('', [Validators.required, Validators.maxLength(150)]),\r\n      city: new FormControl('', [Validators.required, Validators.maxLength(50)]),\r\n      state: new FormControl('', [Validators.required, Validators.maxLength(50)]),\r\n      zip: new FormControl('', [Validators.required, Validators.maxLength(6)]),\r\n      gender: new FormControl('', [Validators.required]),\r\n      dateOfBirth: new FormControl('', [Validators.required]),\r\n      mailId: new FormControl('', [Validators.required, Validators.maxLength(60)]),\r\n      phone: new FormControl('', [Validators.required, Validators.maxLength(60)]),\r\n      maritalStatus: new FormControl('', [Validators.required])\r\n    });\r\n\r\n  }\r\n\r\n  public hasError(controlName: string, errorName: string) {\r\n    return this.registerForm.controls[controlName].hasError(errorName);\r\n  }\r\n\r\n  public onCancel() {\r\n    //this.location.back();\r\n  }\r\n\r\n  public register(registerFormValue) {\r\n    if (this.registerForm.valid) {\r\n      var patient = new Patient;\r\n      var patientName = new PatientName;\r\n      patientName.firstName = registerFormValue.firstName;\r\n      patientName.lastName = registerFormValue.lastName;\r\n      patient.patientName = patientName;\r\n      var postalAddress = new PostalAddress;\r\n      postalAddress.line1 = registerFormValue.line1;\r\n      postalAddress.line2 = registerFormValue.line2;\r\n      postalAddress.city = registerFormValue.city;\r\n      postalAddress.state = registerFormValue.state;\r\n      postalAddress.zip = registerFormValue.zip;\r\n      patient.postalAddress = postalAddress;\r\n      patient.gender = registerFormValue.gender;\r\n      patient.dateOfBirth = registerFormValue.dateOfBirth;\r\n      patient.mailId = registerFormValue.mailId;\r\n      patient.phone = registerFormValue.phone;\r\n      patient.maritalStatus = registerFormValue.maritalStatus;\r\n      patient.medHistory = [];\r\n      for (var i = 0; i < this.disease_type.length; i++) {\r\n        if (this.disease_type[i].checked)\r\n          patient.medHistory.push(this.disease_type[i].name);\r\n      }\r\n      this.service.saveData(patient).subscribe(\r\n        response => {\r\n          MessageBox.show(this.dialog, \"Alert\", 'Successfully added the reord', MessageBoxButton.Ok, \"350px\")\r\n          this.registerForm.reset();\r\n        },\r\n        error => {\r\n          let errorMsg = '';\r\n          if (typeof error.error.message !== 'undefined')\r\n            errorMsg = error.error.message;\r\n          else if (typeof error.error !== 'undefined')\r\n            errorMsg = error.error;\r\n          else\r\n            errorMsg = error.message;\r\n          MessageBox.show(this.dialog, \"Error\", errorMsg, MessageBoxButton.Ok, \"350px\");\r\n        }\r\n      );\r\n    } else\r\n      MessageBox.show(this.dialog, \"Error\", 'Some Input data are invalid', MessageBoxButton.Ok, \"350px\");\r\n  }\r\n\r\n  onChange(event) {\r\n    for (var i = 0; i < this.disease_type.length; i++) {\r\n      if (this.disease_type[i].name == event.source.value) {\r\n        if (event.checked)\r\n          this.disease_type[i].checked = true;\r\n        else\r\n          this.disease_type[i].checked = false;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","export default \"mat-form-field {\\r\\n  width: 350px;\\r\\n}\\r\\n\\r\\nmat-card-title {\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.mat-hint-style {\\r\\n  font-size: 75%;\\r\\n  font-weight: 400;\\r\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\r\\n  color: rgba(0, 0, 0, 0.54);\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGF0aWVudHMvcGF0aWVudC1kZXRhaWxzL3BhdGllbnQtZGV0YWlscy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsY0FBYztFQUNkLGdCQUFnQjtFQUNoQixpREFBaUQ7RUFDakQsMEJBQTBCO0FBQzVCIiwiZmlsZSI6InNyYy9hcHAvcGF0aWVudHMvcGF0aWVudC1kZXRhaWxzL3BhdGllbnQtZGV0YWlscy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsibWF0LWZvcm0tZmllbGQge1xyXG4gIHdpZHRoOiAzNTBweDtcclxufVxyXG5cclxubWF0LWNhcmQtdGl0bGUge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5cclxuLm1hdC1oaW50LXN0eWxlIHtcclxuICBmb250LXNpemU6IDc1JTtcclxuICBmb250LXdlaWdodDogNDAwO1xyXG4gIGZvbnQtZmFtaWx5OiBSb2JvdG8sIFwiSGVsdmV0aWNhIE5ldWVcIiwgc2Fucy1zZXJpZjtcclxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjU0KTtcclxufVxyXG4iXX0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { Location } from '@angular/common';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { PatientService } from 'src/app/services/patient.service';\r\nimport { Patient } from 'src/app/model/patient';\r\nimport { GENDER, MARITAL_STATUS, DISEASE_TYPE } from 'src/app/constant';\r\nimport { MessageBox, MessageBoxButton } from 'src/app/shared/message-box';\r\n\r\n@Component({\r\n  selector: 'app-patient-details',\r\n  templateUrl: './patient-details.component.html',\r\n  styleUrls: ['./patient-details.component.css']\r\n})\r\nexport class PatientDetailsComponent implements OnInit {\r\n\r\n  constructor(\r\n    private activeRoute: ActivatedRoute,\r\n    private service: PatientService,\r\n    private dialog: MatDialog,\r\n    private location: Location) {\r\n  }\r\n\r\n  patient: Patient;\r\n  public registerForm: FormGroup;\r\n  public genders = GENDER;\r\n  public marital_status = MARITAL_STATUS;\r\n  public disease_type = DISEASE_TYPE;\r\n\r\n  ngOnInit() {\r\n\r\n    this.registerForm = new FormGroup({\r\n      firstName: new FormControl(''),\r\n      lastName: new FormControl(''),\r\n      line1: new FormControl(''),\r\n      line2: new FormControl(''),\r\n      city: new FormControl(''),\r\n      state: new FormControl(''),\r\n      zip: new FormControl(''),\r\n      gender: new FormControl(''),\r\n      dateOfBirth: new FormControl(''),\r\n      mailId: new FormControl(''),\r\n      phone: new FormControl(''),\r\n      maritalStatus: new FormControl('')\r\n    });\r\n    this.registerForm.disable();\r\n\r\n    let id: string = this.activeRoute.snapshot.params['id'];\r\n    this.service.getDataById(id).subscribe(\r\n      response => {\r\n        this.patient = response;\r\n        this.registerForm = new FormGroup({\r\n          firstName: new FormControl(this.patient.patientName.firstName),\r\n          lastName: new FormControl(this.patient.patientName.lastName),\r\n          line1: new FormControl(this.patient.postalAddress.line1),\r\n          line2: new FormControl(this.patient.postalAddress.line2),\r\n          city: new FormControl(this.patient.postalAddress.city),\r\n          state: new FormControl(this.patient.postalAddress.state),\r\n          zip: new FormControl(this.patient.postalAddress.zip),\r\n          gender: new FormControl(this.patient.gender),\r\n          dateOfBirth: new FormControl(this.patient.dateOfBirth),\r\n          mailId: new FormControl(this.patient.mailId),\r\n          phone: new FormControl(this.patient.phone),\r\n          maritalStatus: new FormControl(this.patient.maritalStatus)\r\n        });\r\n        this.registerForm.disable();\r\n        for (var i = 0; i < this.disease_type.length; i++) {\r\n          if (this.patient.medHistory.indexOf(this.disease_type[i].name) != -1) {\r\n            this.disease_type[i].checked = true;\r\n          }\r\n        }\r\n      },\r\n      error => {\r\n        let errorMsg = '';\r\n        if (typeof error.error.message !== 'undefined')\r\n          errorMsg = error.error.message;\r\n        else if (typeof error.error !== 'undefined')\r\n          errorMsg = error.error;\r\n        else\r\n          errorMsg = error.message;\r\n        MessageBox.show(this.dialog, \"Error\", errorMsg, MessageBoxButton.Ok, \"350px\");\r\n      }\r\n    );\r\n  }\r\n\r\n  onCancel() {\r\n    this.location.back();\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { PatientService } from '../../services/patient.service';\r\nimport { Patient } from '../../model/patient';\r\nimport { MatTableDataSource, MatSort, MatPaginator, MatDialog } from '@angular/material';\r\nimport { Router } from '@angular/router';\r\nimport { MessageBoxButton, MessageBox } from 'src/app/shared/message-box';\r\n\r\n@Component({\r\n  selector: 'app-patient-list',\r\n  templateUrl: './patient-list.component.html',\r\n  styles: []\r\n})\r\nexport class PatientListComponent implements OnInit {\r\n\r\n  constructor(\r\n    private service: PatientService,\r\n    private router: Router,\r\n    private dialog: MatDialog) {\r\n  }\r\n\r\n  public dialogConfig;\r\n  public displayedColumns = ['patientName', 'postalAddress', 'gender', 'dateOfBirth', 'mailId', 'phone', 'maritalStatus', 'medicalHistory',\r\n    'details', 'update', 'delete'];\r\n  public dataSource = new MatTableDataSource<Patient>();\r\n\r\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  pageIndex = 0;\r\n  totalLength: number = 0;\r\n  pageSize: number = 10;\r\n  pageSizeOptions: number[] = [5, 10, 25, 100];\r\n\r\n  ngOnInit() {\r\n\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n    this.dataSource.filterPredicate = (data, filter: string) => {\r\n      const accumulator = (currentTerm, key) => {\r\n        return this.nestedFilterCheck(currentTerm, data, key);\r\n      };\r\n      const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\r\n      const transformedFilter = filter.trim().toLowerCase();\r\n      return dataStr.indexOf(transformedFilter) !== -1;\r\n    }\r\n\r\n    this.getPatientList();\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  pageChange(event: any) {\r\n    /*this.pageIndex = event.pageIndex;\r\n    this.pageSize = event.pageSize\r\n    this.createTable();*/\r\n  }\r\n\r\n  public getPatientList() {\r\n\r\n    this.service.getData().subscribe(\r\n      response => {\r\n        this.dataSource.data = response.patients;\r\n      },\r\n      error => {\r\n        let errorMsg = '';\r\n        if (typeof error.error.message !== 'undefined')\r\n          errorMsg = error.error.message;\r\n        else if (typeof error.error !== 'undefined')\r\n          errorMsg = error.error;\r\n        else\r\n          errorMsg = error.message;\r\n        MessageBox.show(this.dialog, \"Error\", errorMsg, MessageBoxButton.Ok, \"350px\");\r\n      }\r\n    );\r\n  }\r\n\r\n  public redirectToDetails = (id: string) => {\r\n    let url: string = `/patient/details/${id}`;\r\n    this.router.navigate([url]);\r\n  }\r\n\r\n  public redirectToUpdate = (id: string) => {\r\n    let url: string = `/patient/update/${id}`;\r\n    this.router.navigate([url]);\r\n  }\r\n\r\n  public redirectToDelete = (id: string) => {\r\n    MessageBox.show(this.dialog, \"Confirm Action\", 'Do you want to delete the record ?', MessageBoxButton.YesNo, \"350px\")\r\n      .subscribe(result => {\r\n        const dialogResult = (result === undefined) ? \"none\" : result.result;\r\n        if (dialogResult == \"yes\") {\r\n          this.service.deleteData(id).subscribe(\r\n            response => {\r\n              MessageBox.show(this.dialog, \"Alert\", 'Successfully deleted the reord ' + id, MessageBoxButton.Ok, \"350px\")\r\n                .subscribe(result => {\r\n                  this.getPatientList();\r\n                });\r\n            },\r\n            error => {\r\n              let errorMsg = '';\r\n              if (typeof error.error.message !== 'undefined')\r\n                errorMsg = error.error.message;\r\n              else if (typeof error.error !== 'undefined')\r\n                errorMsg = error.error;\r\n              else\r\n                errorMsg = error.message;\r\n              MessageBox.show(this.dialog, \"Error\", errorMsg, MessageBoxButton.Ok, \"350px\");\r\n            }\r\n          );\r\n        }\r\n      });\r\n\r\n  }\r\n\r\n  nestedFilterCheck(search, data, key) {\r\n    if (typeof data[key] === 'object') {\r\n      for (const k in data[key]) {\r\n        if (data[key][k] !== null) {\r\n          search = this.nestedFilterCheck(search, data[key], k);\r\n        }\r\n      }\r\n    } else {\r\n      search += data[key];\r\n    }\r\n    return search;\r\n  }\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { PatientListComponent } from '../patients/patient-list/patient-list.component';\r\nimport { PatientDetailsComponent } from '../patients/patient-details/patient-details.component';\r\nimport { PatientCreateComponent } from '../patients/patient-create/patient-create.component';\r\nimport { PatientUpdateComponent } from '../patients/patient-update/patient-update.component';\r\n//import { PatientDeleteComponent } from '../patients/patient-delete/owner-delete.component';\r\n\r\nconst patientRoutes: Routes = [\r\n  { path: 'patients', component: PatientListComponent },\r\n  { path: 'details/:id', component: PatientDetailsComponent},\r\n  { path: 'create', component: PatientCreateComponent },\r\n  { path: 'update/:id', component: PatientUpdateComponent },\r\n  //{ path: 'delete/:id', component: PatientDeleteComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(patientRoutes)\r\n  ],\r\n  exports: [\r\n    RouterModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class PatientRoutingModule { }\r\n","export default \"mat-form-field {\\r\\n  width: 350px;\\r\\n}\\r\\n\\r\\nmat-card-title {\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.mat-hint-style {\\r\\n  font-size: 75%;\\r\\n  font-weight: 400;\\r\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\r\\n  color: rgba(0, 0, 0, 0.54);\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGF0aWVudHMvcGF0aWVudC11cGRhdGUvcGF0aWVudC11cGRhdGUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxnQkFBZ0I7RUFDaEIsaURBQWlEO0VBQ2pELDBCQUEwQjtBQUM1QiIsImZpbGUiOiJzcmMvYXBwL3BhdGllbnRzL3BhdGllbnQtdXBkYXRlL3BhdGllbnQtdXBkYXRlLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJtYXQtZm9ybS1maWVsZCB7XHJcbiAgd2lkdGg6IDM1MHB4O1xyXG59XHJcblxyXG5tYXQtY2FyZC10aXRsZSB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG4ubWF0LWhpbnQtc3R5bGUge1xyXG4gIGZvbnQtc2l6ZTogNzUlO1xyXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgZm9udC1mYW1pbHk6IFJvYm90bywgXCJIZWx2ZXRpY2EgTmV1ZVwiLCBzYW5zLXNlcmlmO1xyXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNTQpO1xyXG59XHJcbiJdfQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router'\r\nimport { Location } from '@angular/common';\r\nimport { PatientService } from 'src/app/services/patient.service';\r\nimport { Patient } from 'src/app/model/patient';\r\nimport { PatientName } from 'src/app/model/patient_name';\r\nimport { PostalAddress } from 'src/app/model/postal_address';\r\nimport { GENDER, MARITAL_STATUS, DISEASE_TYPE } from 'src/app/constant';\r\nimport { MessageBox, MessageBoxButton } from 'src/app/shared/message-box';\r\n\r\n@Component({\r\n  selector: 'app-patient-update',\r\n  templateUrl: './patient-update.component.html',\r\n  styleUrls: ['./patient-update.component.css']\r\n})\r\nexport class PatientUpdateComponent implements OnInit {\r\n\r\n  public patientId: String;\r\n  patient: Patient;\r\n  public registerForm: FormGroup;\r\n  public genders = GENDER;\r\n  public marital_status = MARITAL_STATUS;\r\n  public disease_type = DISEASE_TYPE;\r\n\r\n  constructor(\r\n    private activeRoute: ActivatedRoute,\r\n    private dialog: MatDialog,\r\n    private service: PatientService,\r\n    private location: Location\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n    this.registerForm = new FormGroup({\r\n      firstName: new FormControl(''),\r\n      lastName: new FormControl(''),\r\n      line1: new FormControl(''),\r\n      line2: new FormControl(''),\r\n      city: new FormControl(''),\r\n      state: new FormControl(''),\r\n      zip: new FormControl(''),\r\n      gender: new FormControl(''),\r\n      dateOfBirth: new FormControl(''),\r\n      mailId: new FormControl(''),\r\n      phone: new FormControl(''),\r\n      maritalStatus: new FormControl('')\r\n    });\r\n\r\n    let id: string = this.activeRoute.snapshot.params['id'];\r\n    this.patientId = id;\r\n    this.service.getDataById(id).subscribe(\r\n      response => {\r\n        this.patient = response;\r\n        this.registerForm = new FormGroup({\r\n          firstName: new FormControl(this.patient.patientName.firstName, [Validators.required, Validators.maxLength(50)]),\r\n          lastName: new FormControl(this.patient.patientName.lastName, [Validators.required, Validators.maxLength(60)]),\r\n          line1: new FormControl(this.patient.postalAddress.line1, [Validators.required, Validators.maxLength(150)]),\r\n          line2: new FormControl(this.patient.postalAddress.line2, [Validators.required, Validators.maxLength(150)]),\r\n          city: new FormControl(this.patient.postalAddress.city, [Validators.required, Validators.maxLength(50)]),\r\n          state: new FormControl(this.patient.postalAddress.state, [Validators.required, Validators.maxLength(50)]),\r\n          zip: new FormControl(this.patient.postalAddress.zip, [Validators.required, Validators.maxLength(6)]),\r\n          gender: new FormControl(this.patient.gender, [Validators.required]),\r\n          dateOfBirth: new FormControl(this.patient.dateOfBirth, [Validators.required]),\r\n          mailId: new FormControl(this.patient.mailId, [Validators.required, Validators.maxLength(60)]),\r\n          phone: new FormControl(this.patient.phone, [Validators.required, Validators.maxLength(60)]),\r\n          maritalStatus: new FormControl(this.patient.maritalStatus, [Validators.required])\r\n        });\r\n        for (var i = 0; i < this.disease_type.length; i++) {\r\n          if (this.patient.medHistory.indexOf(this.disease_type[i].name) != -1) {\r\n            this.disease_type[i].checked = true;\r\n          }\r\n        }\r\n      },\r\n      error => {\r\n        this.registerForm.disable();\r\n        let errorMsg = '';\r\n        if (typeof error.error.message !== 'undefined')\r\n          errorMsg = error.error.message;\r\n        else if (typeof error.error !== 'undefined')\r\n          errorMsg = error.error;\r\n        else\r\n          errorMsg = error.message;\r\n        MessageBox.show(this.dialog, \"Error\", errorMsg, MessageBoxButton.Ok, \"350px\");\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  public hasError(controlName: string, errorName: string) {\r\n    return this.registerForm.controls[controlName].hasError(errorName);\r\n  }\r\n\r\n  public register(registerFormValue) {\r\n    if (this.registerForm.valid) {\r\n      var patient = new Patient;\r\n      patient.id = this.patientId;\r\n      var patientName = new PatientName;\r\n      patientName.firstName = registerFormValue.firstName;\r\n      patientName.lastName = registerFormValue.lastName;\r\n      patient.patientName = patientName;\r\n      var postalAddress = new PostalAddress;\r\n      postalAddress.line1 = registerFormValue.line1;\r\n      postalAddress.line2 = registerFormValue.line2;\r\n      postalAddress.city = registerFormValue.city;\r\n      postalAddress.state = registerFormValue.state;\r\n      postalAddress.zip = registerFormValue.zip;\r\n      patient.postalAddress = postalAddress;\r\n      patient.gender = registerFormValue.gender;\r\n      patient.dateOfBirth = registerFormValue.dateOfBirth;\r\n      patient.mailId = registerFormValue.mailId;\r\n      patient.phone = registerFormValue.phone;\r\n      patient.maritalStatus = registerFormValue.maritalStatus;\r\n      patient.medHistory = [];\r\n      for (var i = 0; i < this.disease_type.length; i++) {\r\n        if (this.disease_type[i].checked)\r\n          patient.medHistory.push(this.disease_type[i].name);\r\n      }\r\n      this.service.updateData(this.patientId, patient).subscribe(\r\n        response => {\r\n          MessageBox.show(this.dialog, \"Alert\", 'Successfully updated the reord ' + this.patientId, MessageBoxButton.Ok, \"350px\");\r\n        },\r\n        error => {\r\n          let errorMsg = '';\r\n          if (typeof error.error.message !== 'undefined')\r\n            errorMsg = error.error.message;\r\n          else if (typeof error.error !== 'undefined')\r\n            errorMsg = error.error;\r\n          else\r\n            errorMsg = error.message;\r\n          MessageBox.show(this.dialog, \"Error\", errorMsg, MessageBoxButton.Ok, \"350px\");\r\n        }\r\n      );\r\n    } else\r\n      MessageBox.show(this.dialog, \"Error\", 'Some Input data are invalid', MessageBoxButton.Ok, \"350px\");\r\n  }\r\n\r\n  onChange(event) {\r\n    for (var i = 0; i < this.disease_type.length; i++) {\r\n      if (this.disease_type[i].name == event.source.value) {\r\n        if (event.checked)\r\n          this.disease_type[i].checked = true;\r\n        else\r\n          this.disease_type[i].checked = false;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  onCancel() {\r\n    this.location.back();\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\nimport { PatientListComponent } from './patient-list/patient-list.component';\r\nimport { PatientRoutingModule } from './patient-routing.module';\r\nimport { PatientDetailsComponent } from './patient-details/patient-details.component';\r\nimport { PatientCreateComponent } from './patient-create/patient-create.component';\r\nimport { PatientUpdateComponent } from './patient-update/patient-update.component';\r\n//import { PatientDeleteComponent } from './patient-delete/patient-delete.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    PatientRoutingModule,\r\n    ReactiveFormsModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    PatientListComponent, \r\n    PatientDetailsComponent, \r\n    PatientCreateComponent, \r\n    PatientUpdateComponent, \r\n    //PatientDeleteComponent\r\n  ]\r\n})\r\nexport class PatientModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { API_URL } from '../constant';\r\nimport { Patient } from '../model/patient';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PatientService {\r\n\r\n  //url = 'http://localhost:4000';\r\n  baseURL = 'http://localhost:8080';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getData(): Observable<any> {\r\n    //return this.http.get(`${this.url}/patients`);\r\n    return this.http.get(`${API_URL}/user/get`);\r\n  }\r\n\r\n  getDataById(id: String): Observable<any> {\r\n    return this.http.get(`${API_URL}/user/get/${id}`);\r\n  }\r\n\r\n  saveData(patient: Patient): Observable<any> {\r\n    return this.http.post(`${API_URL}/user/create`, patient);\r\n  }\r\n\r\n  updateData(id: String, patient: Patient): Observable<any> {\r\n    return this.http.put(`${API_URL}/user/update/${id}`, patient);\r\n  }\r\n\r\n  deleteData(id: string): Observable<any> {\r\n    return this.http.delete(`${API_URL}/user/delete/${id}`);\r\n  }\r\n}"],"sourceRoot":"webpack:///","file":"patients-patient-module-es5.js"}